{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "instrumentationKey": {
      "type": "string"
    },
    "infraAcrId": {
      "type": "string"
    },
    "infraAcrLoginServer": {
      "type": "string"
    },
    "laboratoryImage": {
      "type": "string"
    },
    "runsQueueEndpoint": {
      "type": "string"
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "defaultValue": "[newGuid()]"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "keyVault": {
      "type": "string"
    },
    "authMode": {
      "type": "string",
      "defaultValue": "none"
    },
    "authTenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]"
    },
    "authLaboratoryClientId": {
      "type": "string",
      "defaultValue": ""
    },
    "authCliClientId": {
      "type": "string",
      "defaultValue": ""
    },
    "authAllowedClientIds": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "adminEmailAddresses": [
    ],
    "bootstrap": "bootstrap",
    "bootstrapSql": "bootstrapSql",
    "bootstrapKV": "bootstrapKV",
    "diagnosticsLogs": "diagnosticslogs",
    "infraAcrName": "[last(split(parameters('infraAcrId'), '/'))]",
    "laboratory": "laboratory",
    "sqlAdminUsername": "laboratory",
    "sqlEncryptionKey": "laboratorySql",
    "sqlServer": "[concat('laboratory', variables('suffix'))]",
    "suffix": "[toLower(take(uniqueString(resourceGroup().id), 6))]",
    "vulnerabilityAssessments": "vulnerabilityassessments",
    "webApp": "[concat('laboratory', variables('suffix'))]",
    "contributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "acrPullRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
    "storageBlobDataContributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]",
      "name": "[variables('bootstrap')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]",
      "name": "[variables('laboratory')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2019-06-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('sqlServer')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "administratorLogin": "[variables('sqlAdminUsername')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "minimalTlsVersion": "1.2",
        "version": "12.0"
      },
      "resources": [
        {
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]"
          ],
          "type": "firewallRules",
          "apiVersion": "2015-05-01-preview",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]"
          ],
          "type": "databases",
          "apiVersion": "2019-06-01-preview",
          "location": "[resourceGroup().location]",
          "name": "[variables('laboratory')]",
          "tags": "[parameters('tags')]",
          "sku": {
            "name": "Standard",
            "tier": "Standard"
          },
          "properties": {
          }
        },
        {
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]",
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]"
          ],
          "type": "administrators",
          "apiVersion": "2019-06-01-preview",
          "name": "ActiveDirectory",
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[variables('bootstrap')]",
            "sid": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap')), '2018-11-30').principalId]",
            "tenantId": "[subscription().tenantId]"
          }
        },
        {
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]"
          ],
          "type": "securityAlertPolicies",
          "apiVersion": "2017-03-01-preview",
          "name": "default",
          "properties": {
            "state": "Enabled",
            "emailAccountAdmins": true,
            "emailAddresses": "[variables('adminEmailAddresses')]"
          }
        }
      ]
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]",
        "[resourceId('Microsoft.Resources/deploymentScripts', variables('bootstrapKV'))]"
      ],
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[concat(variables('sqlServer'), '-encryption')]",
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "sqlServer": {
            "value": "[variables('sqlServer')]"
          },
          "keyName": {
            "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', variables('bootstrapKV'))).outputs.keyName]"
          },
          "keyUrl": {
            "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', variables('bootstrapKV'))).outputs.keyUrl]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "sqlServer": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "keyUrl": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/keys",
              "apiVersion": "2015-05-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServer'), parameters('keyName'))]",
              "properties": {
                "serverKeyType": "AzureKeyVault",
                "uri": "[parameters('keyUrl')]"
              }
            },
            {
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/keys', parameters('sqlServer'), parameters('keyName'))]"
              ],
              "type": "Microsoft.Sql/servers/encryptionProtector",
              "apiVersion": "2015-05-01-preview",
              "location": "[resourceGroup().location]",
              "name": "[format('{0}/{1}', parameters('sqlServer'), 'current')]",
              "properties": {
                "serverKeyName": "[parameters('keyName')]",
                "serverKeyType": "AzureKeyVault"
              }
            }
          ]
        }
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]"
      ],
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "name": "[concat(parameters('keyVault'), '/add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Sql/servers', variables('sqlServer')), '2019-06-01-preview', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
                "get",
                "wrapkey",
                "unwrapkey"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))).principalId]",
            "permissions": {
              "keys": [
                "get",
                "create"
              ]
            }
          }
        ] 
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]"
      ],
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[guid(concat(resourceGroup().id, variables('bootstrap'), 'Contributor'))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))).principalId]",
        "roleDefinitionId": "[variables('contributorRoleId')]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(concat(resourceGroup().id, variables('bootstrap'), 'Contributor')))]",
        "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServer'), variables('laboratory'))]"
      ],
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2019-10-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('bootstrapSql')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "tags": "[parameters('tags')]",
      "properties": {
        "azPowerShellVersion": "4.6",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format(' -server {0} -database {1} -identity {2} -clientId {3}', reference(resourceId('Microsoft.Sql/servers', variables('sqlServer'))).fullyQualifiedDomainName, variables('laboratory'), variables('laboratory'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))).clientId)]",
        "scriptContent": "
param(
  [string] [Parameter(Mandatory=$true)] $server,
  [string] [Parameter(Mandatory=$true)] $database,
  [string] [Parameter(Mandatory=$true)] $identity,
  [string] [Parameter(Mandatory=$true)] $clientId
)

$ErrorActionPreference = 'Stop';

# Connect to Azure SQL via AAD (Managed Identity)
$token = curl -s 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://database.windows.net/' -H 'Metadata: true' | ConvertFrom-Json;
$conn = New-Object System.Data.SqlClient.SqlConnection;
$conn.ConnectionString = 'Data Source={0}; Initial Catalog={1};' -f $server, $database;
$conn.AccessToken = $token.access_token;
$conn.Open();

Write-Output 'Connected to {0}/{1} using Managed Identity' -f $server, $database

# Grant AAD permissions in Azure SQL
foreach ($byte in [System.Guid]::Parse($clientId).ToByteArray()) { $byteGuid += [System.String]::Format('{0:X2}', $byte) }
$sql = @'
if not exists (select name from sys.database_principals where name = '{0}')
begin
create user [{0}] with default_schema=[dbo], SID=0x{1}, TYPE=E;
end

alter role db_ddladmin add member [{0}];
alter role db_datareader add member [{0}];
alter role db_datawriter add member [{0}];
'@ -f $identity, $byteGuid
$cmd = New-Object System.Data.SqlClient.SqlCommand($sql, $conn)
$cmd.ExecuteNonQuery()
Write-Output 'Added {0} as an AAD user to {1}/{2}' -f $identity, $server, $database
$conn.Close()
        "
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(concat(resourceGroup().id, variables('bootstrap'), 'Contributor')))]",
        "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServer'), variables('laboratory'))]",
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVault'), 'add')]"
      ],
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2019-10-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('bootstrapKV')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('bootstrap'))]": {}
        }
      },
      "kind": "AzurePowerShell",
      "tags": "[parameters('tags')]",
      "properties": {
        "azPowerShellVersion": "4.6",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnSuccess",
        "arguments": "[format(' -keyVault {0} -keyName {1}', parameters('keyVault'), variables('sqlEncryptionKey'))]",
        "scriptContent": "
param(
  [string] [Parameter(Mandatory=$true)] $keyVault,
  [string] [Parameter(Mandatory=$true)] $keyName
)

$ErrorActionPreference = 'Stop';

$key = Get-AzKeyVaultKey -VaultName $keyVault -Name $keyName
if (!$key) {
  $key = Add-AzKeyVaultKey -VaultName $keyVault -Name $keyName -Destination Software
}

$DeploymentScriptOutputs = @{}
$DeploymentScriptOutputs['keyName'] = '{0}_{1}_{2}' -f $key.VaultName, $key.Name, $key.Version
$DeploymentScriptOutputs['keyUrl'] = $key.Id
        "
      }
    },
    {
      "type": "Microsoft.Web/serverFarms",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "name": "[variables('laboratory')]",
      "kind": "linux",
      "sku": {
        "name": "S1"
      },
      "tags": "[parameters('tags')]",
      "properties": {
        "reserved": true
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', variables('bootstrapSql'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))]",
        "[resourceId('Microsoft.Web/serverFarms', variables('laboratory'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServer'))]"
      ],
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "location": "[resourceGroup().location]",
      "name": "[variables('webApp')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))]": {}
        }
      },
      "kind": "app,linux,container",
      "tags": "[parameters('tags')]",
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', variables('laboratory'))]",
        "siteConfig": {
          "alwaysOn": true,
          "minTlsVersion": "1.2",
          "linuxFxVersion": "DOCKER|nginx"
        }
      },
      "resources": [
        {
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('webApp'))]",
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))]",
            "[extensionResourceId(parameters('infraAcrId'), 'Microsoft.Authorization/roleAssignments', guid(concat(resourceGroup().id, variables('laboratory'), parameters('infraAcrId'), 'AcrPull')))]"
          ],
          "type": "config",
          "apiVersion": "2019-08-01",
          "name": "web",
          "properties": {
            "acrUseManagedIdentityCreds": true,
            "acrUserManagedIdentityID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))).clientId]",
            "linuxFxVersion": "[concat('DOCKER|', parameters('laboratoryImage'))]"
          }
        },
        {
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('webApp'))]",
            "[resourceId('Microsoft.Web/sites/config', variables('webApp'), 'web')]",
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))]"
          ],
          "type": "config",
          "apiVersion": "2019-08-01",
          "name": "appsettings",
          "properties": {
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[parameters('instrumentationKey')]",
            "AUTH_MODE": "[parameters('authMode')]",
            "AUTH_TENANT_ID": "[parameters('authTenantId')]",
            "AUTH_LABORATORY_CLIENT_ID": "[parameters('authLaboratoryClientId')]",
            "AUTH_CLI_CLIENT_ID": "[parameters('authCliClientId')]",
            "AUTH_ALLOWED_APPLICATION_CLIENT_IDS": "[parameters('authAllowedClientIds')]",
            "AZURE_CLIENT_ID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))).clientId]",
            "QUEUE_MODE": "azure",
            "QUEUE_ENDPOINT": "[parameters('runsQueueEndpoint')]",
            "SQL_MODE": "azuresql",
            "SQL_HOST": "[reference(resourceId('Microsoft.Sql/servers', variables('sqlServer'))).fullyQualifiedDomainName]",
            "SQL_DB": "[variables('laboratory')]",
            "DOCKER_REGISTRY_SERVER_URL": "[concat('https://', parameters('infraAcrLoginServer'))]",
            "DOCKER_ENABLE_CI": "true",
            "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
            "WEBSITES_PORT": "3000"
          }
        }
      ]
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms', variables('laboratory'))]"
      ],
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2014-04-01",
      "location": "[resourceGroup().location]",
      "name": "[variables('laboratory')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "enabled": true,
        "targetResourceUri": "[resourceId('Microsoft.Web/serverFarms', variables('laboratory'))]",
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 3,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('laboratory'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "cooldown": "PT5M",
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('laboratory'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 30
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "MemoryPercentage",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('laboratory'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "MemoryPercentage",
                  "metricNamespace": "",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('laboratory'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 30
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))]"
      ],
      "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('infraAcrName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id, variables('laboratory'), parameters('infraAcrId'), 'AcrPull')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))).principalId]",
        "roleDefinitionId": "[variables('acrPullRoleId')]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "laboratoryIdentityId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('laboratory'))).principalId]"
    },
    "laboratorySqlServer": {
      "type": "string",
      "value": "[variables('sqlServer')]"
    },
    "laboratorySqlDatabase": {
      "type": "string",
      "value": "[variables('laboratory')]"
    },
    "laboratoryWebApp": {
      "type": "string",
      "value": "[variables('laboratory')]"
    },
    "laboratoryEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('webApp'))).defaultHostName]"
    }
  }
}
